<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Unity中的ScriptableObject</title>
    <link href="/2024/03/29/Unity%E4%B8%AD%E7%9A%84ScriptableObject/"/>
    <url>/2024/03/29/Unity%E4%B8%AD%E7%9A%84ScriptableObject/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近学习Unity，对其中的ScriptableObject比较好奇，查了一些资料总结了一下，记录下来以便查阅。</p><h1 id="ScriptableObject是什么"><a href="#ScriptableObject是什么" class="headerlink" title="ScriptableObject是什么"></a>ScriptableObject是什么</h1><p>ScriptableObject，以下简称SO，是在Unity中的一种数据存储和管理的方式。<br>SO不挂载在GameObject上，是作为Asset保存在项目中的。</p><p>简单的类比，SO就像是数据库。<br>首先创建的C#脚本，继承ScriptableObject类。这个C#脚本定义着一些变量或者是函数。这个就类似于数据库的一张表。<br>比如我们要保存武器，新建一个WeaponSO，定义诸如name、damage、icon这些变量。好比数据库的各个字段。<br>然后在Unity编辑器中按照这个WeaponSO模版新建一个个SO实例，比如刀、剑、棒槌等等，不同的武器的每个变量值都不一样。就好比数据库的每一行数据。</p><p>与数据库不同的是，我们通常将需要读写的数据存入数据库。而SO我们通常只保存那些只读不写的数据。<br>通俗地说，当我们定义了一个武器，比如棒槌，我们会在游戏设计阶段就定义好它的各项数值，而在游戏正常游玩过程中，我们不会去改变这些值。那边这个数据就可以用SO来保存。</p><h1 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h1><h2 id="C-模版脚本"><a href="#C-模版脚本" class="headerlink" title="C# 模版脚本"></a>C# 模版脚本</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-comment">// Create a new ScriptableObject class</span><br><br>[<span class="hljs-meta">CreateAssetMenu(fileName = <span class="hljs-string">&quot;NewWeapon&quot;</span>, menuName = <span class="hljs-string">&quot;Game/Weapon&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WeaponScriptableObject</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> weaponName;<br> <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> damage;<br> <span class="hljs-keyword">public</span> Sprite icon;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用ScriptbaleObject保存可读写数据"><a href="#使用ScriptbaleObject保存可读写数据" class="headerlink" title="使用ScriptbaleObject保存可读写数据"></a>使用ScriptbaleObject保存可读写数据</h2><p>有的时候，我们可能希望使用SO保存数据，但又希望能够在某些时间去修改它。<br>此时我们可以使用自定义类来保存这个需要修改的数据，然后在SO中存储这个自定义类的引用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerXP</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> XP = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerData</span> : <span class="hljs-title">ScriptableObject</span> &#123;<br> <span class="hljs-keyword">public</span> PlayerXP PlayerXP;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://medium.com/@sonusprocks/how-to-harness-the-power-of-scriptable-objects-in-unity-dc0699c55b21">https://medium.com/@sonusprocks/how-to-harness-the-power-of-scriptable-objects-in-unity-dc0699c55b21</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>ScriptObject</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust和区块链</title>
    <link href="/2023/07/05/Rust%E5%92%8C%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <url>/2023/07/05/Rust%E5%92%8C%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h1><h2 id="区块链是什么"><a href="#区块链是什么" class="headerlink" title="区块链是什么"></a>区块链是什么</h2><p>“区块链”的概念是中本聪在2008年发表的论文中首先提出的。区块链技术提出的本质原因，是为解决在无第三方信任机构背书的情况下如何保障交易正确性的问题。<br>当我们使用现金进行交易，现金所代表的价值是由国家背书；当我们使用银行卡交易，同样也是因为银行卡余额的价值也是由银行，更进一步而言也是国家背书。<br>在有可信任金融机构的情况下，如果双方要进行一次交易，实际上只需要在机构中对两个用户的余额进行原子性的加减操作即可。但是在区块链中，没有一个这样的信任机构记录用户的余额，以及金钱的转移。</p><h2 id="区块链怎么做的"><a href="#区块链怎么做的" class="headerlink" title="区块链怎么做的"></a>区块链怎么做的</h2><p>区块链技术依据非对称加密、数字签名、P2P网络等技术，建立起一个个区块所构成的链表，从而保障数据的安全行和不可篡改性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>统一接入系统</title>
    <link href="/2023/06/17/%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%85%A5%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/06/17/%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%85%A5%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis plus设置字段为空的问题</title>
    <link href="/2023/05/18/mybatis-plus%E8%AE%BE%E7%BD%AE%E5%AD%97%E6%AE%B5%E4%B8%BA%E7%A9%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/05/18/mybatis-plus%E8%AE%BE%E7%BD%AE%E5%AD%97%E6%AE%B5%E4%B8%BA%E7%A9%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在日常的业务开发中，时常会遇到将字段值设置为null的情形。而由于mybatis plus的配置，大多数时候都会默认忽略掉null值。因此记录一下解决这个问题的方案。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>mybatis plus的版本<br><code>&lt;mybatis-plus.version&gt;3.4.1&lt;/mybatis-plus.version&gt;</code><br>Java<br><code>java version &quot;1.8.0_291&quot;</code></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>查看mybatis plus官网的解决方案<br><img src="/asset/img/o27yovt6j5pna_365576aba711455898c9b1b41a19e69e.png" alt="这是图片" title="官网说明"></p><p>实际上，方式一和方式二都不太推荐。因为很容易在其他代码中不小心将值设置为null。毕竟大多数情况下我们都很难记得去复写这个值，更何况有些业务场景下，我们甚至拿不到或者无需关心相应的值。<br>网上也有相关的文档推荐使用如下的方法，但在我的代码里测试时仍然不能修改值为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">UpdateWrapper&lt;Entity&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;&gt;();<br>updateWrapper.set(<span class="hljs-string">&quot;field&quot;</span>, <span class="hljs-literal">null</span>);<br>updateWrapper.eq(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">this</span>.update(updateWrapper);<br></code></pre></td></tr></table></figure><p>最终我是使用了LambdaUpdateWrapper的类的方法成功更新了，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateTemplate</span><span class="hljs-params">(UpdateTemplateRequest request)</span> &#123;<br>    LambdaUpdateWrapper&lt;TemplateDO&gt; lambdaUpdateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateWrapper</span>&lt;&gt;();<br>    lambdaUpdateWrapper.eq(TemplateDO::getTenantId, request.getTenantId());<br>    lambdaUpdateWrapper.set(TemplateDO::getGmtModified, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">// accessKey可能为null</span><br>    lambdaUpdateWrapper.set(TemplateDO::getAccessKey, request.getAccessKey());<br>    <span class="hljs-keyword">if</span> (StringUtils.hasText(request.getName())) &#123;<br>        lambdaUpdateWrapper.set(TemplateDO::getName, request.getName());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (request.getVersion() != <span class="hljs-literal">null</span>) &#123;<br>        lambdaUpdateWrapper.set(TemplateDO::getVersion, request.getVersion());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.update(lambdaUpdateWrapper);<br>&#125;<br></code></pre></td></tr></table></figure><p>不过，除了这个方式之外，也可以直接写sql语句来set空值，但是这种方式不太好维护，因此尽量少使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Update(&quot; update v_game_deploy set &quot;</span><br><span class="hljs-meta">        + &quot; last_version_id =  null,&quot;</span><br><span class="hljs-meta">        + &quot; last_version_name =  null,&quot;</span><br><span class="hljs-meta">        + &quot; last_version_deploy_state =  null,&quot;</span><br><span class="hljs-meta">+ &quot; game_adapt_state = 1&quot;</span><br><span class="hljs-meta">        + &quot; where last_version_id =  #&#123;deploy.lastVersionId&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateLastVersionNull</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deploy&quot;)</span> ViewGameDeployDO viewGameDeployDO)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bug记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mybatis-plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/07/hello-world/"/>
    <url>/2023/05/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记一次java数据库死锁的bug</title>
    <link href="/2023/05/05/%E8%AE%B0%E4%B8%80%E6%AC%A1java%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E7%9A%84bug/"/>
    <url>/2023/05/05/%E8%AE%B0%E4%B8%80%E6%AC%A1java%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E7%9A%84bug/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>之前在线上运行的时候，遇到了一次dealock的bug，具体信息长这样：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Caused <span class="hljs-keyword">by</span>: com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Deadlock <span class="hljs-built_in">found</span> <span class="hljs-keyword">when</span> trying <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> <span class="hljs-keyword">lock</span>; try restarting <span class="hljs-keyword">transaction</span><br></code></pre></td></tr></table></figure><p>出现的场景是，当多台机器同时收到消息发送方发出的多台消息，在处理的过程中，有一个sql语句是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deactivatePCByVersionId</span><span class="hljs-params">(Long tenantId, Long projectId, Long gameId, Long versionId)</span> &#123;<br>        UpdateWrapper&lt;DeploymentDO&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;&gt;();<br>        updateWrapper.eq(<span class="hljs-string">&quot;tenant_id&quot;</span>, tenantId);<br>        updateWrapper.eq(<span class="hljs-string">&quot;project_id&quot;</span>, projectId);<br>        updateWrapper.eq(<span class="hljs-string">&quot;game_id&quot;</span>, gameId);<br>        updateWrapper.ne(<span class="hljs-string">&quot;version_id&quot;</span>, versionId);<br>        updateWrapper.eq(<span class="hljs-string">&quot;state&quot;</span>, DeploymentEnum.ACTIVITY.getState());<br><br>        <span class="hljs-type">DeploymentDO</span> <span class="hljs-variable">updateDO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeploymentDO</span>();<br>        updateDO.setState(DeploymentEnum.INSTALL.getState());<br>        <span class="hljs-built_in">this</span>.update(updateDO, updateWrapper);<br>    &#125;<br></code></pre></td></tr></table></figure><p>数据库里对<code>tenant_id</code>,<code>project_id</code>,<code>game_id</code>,<code>version_id</code>都添加了索引。这里有一个<code>version_id</code>使用了<code>ne</code>，查了一些资料之后发现是这个<code>ne</code>的锅。</p><h1 id="原因探究"><a href="#原因探究" class="headerlink" title="原因探究"></a>原因探究</h1><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>首先去数据库查询最近的一次死锁的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> engine innodb status;<br></code></pre></td></tr></table></figure><p>看到了下面的日志，其中部分16进制的数旁边已经标注了其10进制后的数</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">------------------------<br>LATEST DETECTED DEADLOCK<br>------------------------<br><span class="hljs-number">2023</span><span class="hljs-number">-05</span><span class="hljs-number">-09</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">28</span> <span class="hljs-number">139919443883776</span><br>*** (<span class="hljs-number">1</span>) TRANSACTION:<br>TRANSACTION <span class="hljs-number">795133945</span>, ACTIVE <span class="hljs-number">0</span> sec fetching rows<br>mysql tables in use <span class="hljs-number">3</span>, locked <span class="hljs-number">3</span><br>LOCK <span class="hljs-keyword">WAIT </span><span class="hljs-number">24</span> lock struct(s), heap size <span class="hljs-number">3520</span>, <span class="hljs-number">13</span> row lock(s), undo log entries <span class="hljs-number">1</span><br>MySQL thread id <span class="hljs-number">1241122</span>, OS thread handle <span class="hljs-number">139919575459584</span>, query id <span class="hljs-number">1413198080</span> <span class="hljs-number">172</span>.<span class="hljs-number">20</span>.<span class="hljs-number">192</span>.<span class="hljs-number">36</span> <span class="hljs-keyword">cloudgaming_deploy_prod </span>updating<br><br>UPDATE deployment  SET state=<span class="hljs-string">&#x27;activity&#x27;</span>  <br> <br> WHERE (tenant_id = <span class="hljs-number">229135120355456</span> <span class="hljs-keyword">AND </span>project_id = <span class="hljs-number">1000386</span> <span class="hljs-keyword">AND </span>game_id = <span class="hljs-number">1002525</span> <span class="hljs-keyword">AND </span>version_id = <span class="hljs-number">1003618</span> <span class="hljs-keyword">AND </span>state = <span class="hljs-string">&#x27;install&#x27;</span>)<br><br>*** (<span class="hljs-number">1</span>) HOLDS THE LOCK(S):<br><br>UPDATE deployment  SET state=<span class="hljs-string">&#x27;install&#x27;</span>  <br> <br> WHERE (tenant_id = <span class="hljs-number">229135120355456</span> <span class="hljs-keyword">AND </span>project_id = <span class="hljs-number">1000386</span> <span class="hljs-keyword">AND </span>game_id = <span class="hljs-number">1002525</span> <span class="hljs-keyword">AND </span>version_id &lt;&gt; <span class="hljs-number">1003618</span> <span class="hljs-keyword">AND </span>state = <span class="hljs-string">&#x27;activity&#x27;</span>)<br><br>*** (<span class="hljs-number">1</span>) HOLDS THE LOCK(S):<br>RECORD LOCKS space id <span class="hljs-number">7</span> page no <span class="hljs-number">303</span> n <span class="hljs-keyword">bits </span><span class="hljs-number">200</span> index PRIMARY of table `<span class="hljs-keyword">cloudgaming_deploy_prod`.`deployment` </span>trx id <span class="hljs-number">795133945</span> lock_mode X locks rec <span class="hljs-keyword">but </span>not gap<br>Record lock, heap no <span class="hljs-number">68</span> PHYSICAL RECORD: n_fields <span class="hljs-number">12</span><span class="hljs-comment">; compact format; info bits 128</span><br><span class="hljs-symbol"> 0:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 0000000000001df6; asc         ;; 【7670】</span><br><span class="hljs-symbol"> 1:</span> len <span class="hljs-number">6</span><span class="hljs-comment">; hex 00002f0367d9; asc   / g ;;</span><br><span class="hljs-symbol"> 2:</span> len <span class="hljs-number">7</span><span class="hljs-comment">; hex 020000027f3795; asc      7 ;;</span><br><span class="hljs-symbol"> 3:</span> len <span class="hljs-number">7</span><span class="hljs-comment">; hex 99af6d39cb099c; asc   m9   ;;</span><br><span class="hljs-symbol"> 4:</span> len <span class="hljs-number">7</span><span class="hljs-comment">; hex 99b00ae0811a68; asc       h;;</span><br><span class="hljs-symbol"> 5:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 0000d065ad745080; asc    e tP ;;</span><br><span class="hljs-symbol"> 6:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 00000000000f43c2; asc       C ;;</span><br><span class="hljs-symbol"> 7:</span> len <span class="hljs-number">26</span><span class="hljs-comment">; hex 63672d333935393538363835323730323737313230497046356d; asc cg-395958685270277120IpF5m;;</span><br><span class="hljs-symbol"> 8:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 00000000000f4c1d; asc       L ;;</span><br><span class="hljs-symbol"> 9:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 00000000000f5062; asc       Pb;;</span><br><span class="hljs-symbol"> 10:</span> len <span class="hljs-number">7</span><span class="hljs-comment">; hex 696e76616c6964; asc invalid;;</span><br><span class="hljs-symbol"> 11:</span> len <span class="hljs-number">4</span><span class="hljs-comment">; hex 80000001; asc     ;;</span><br><br><br>*** (<span class="hljs-number">1</span>) <span class="hljs-keyword">WAITING </span>FOR THIS LOCK TO <span class="hljs-keyword">BE </span>GRANTED:<br>RECORD LOCKS space id <span class="hljs-number">7</span> page no <span class="hljs-number">400</span> n <span class="hljs-keyword">bits </span><span class="hljs-number">440</span> index idx_projectid of table `<span class="hljs-keyword">cloudgaming_deploy_prod`.`deployment` </span>trx id <span class="hljs-number">795133945</span> lock_mode X locks rec <span class="hljs-keyword">but </span>not gap <span class="hljs-keyword">waiting</span><br><span class="hljs-keyword"></span>Record lock, heap no <span class="hljs-number">150</span> PHYSICAL RECORD: n_fields <span class="hljs-number">2</span><span class="hljs-comment">; compact format; info bits 0</span><br><span class="hljs-symbol"> 0:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 00000000000f43c2; asc       C ;; 【1000386】</span><br><span class="hljs-symbol"> 1:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 0000000000001dea; asc         ;; 【7658】</span><br><br><br>*** (<span class="hljs-number">2</span>) TRANSACTION:<br>TRANSACTION <span class="hljs-number">795133944</span>, ACTIVE <span class="hljs-number">1</span> sec fetching rows<br>mysql tables in use <span class="hljs-number">3</span>, locked <span class="hljs-number">3</span><br>LOCK <span class="hljs-keyword">WAIT </span><span class="hljs-number">25</span> lock struct(s), heap size <span class="hljs-number">3520</span>, <span class="hljs-number">15</span> row lock(s), undo log entries <span class="hljs-number">1</span><br>MySQL thread id <span class="hljs-number">1236656</span>, OS thread handle <span class="hljs-number">139919465850624</span>, query id <span class="hljs-number">1413198075</span> <span class="hljs-number">172</span>.<span class="hljs-number">20</span>.<span class="hljs-number">192</span>.<span class="hljs-number">35</span> <span class="hljs-keyword">cloudgaming_deploy_prod </span>updating<br><br>UPDATE deployment  SET state=<span class="hljs-string">&#x27;install&#x27;</span>  <br> <br> WHERE (tenant_id = <span class="hljs-number">229135120355456</span> <span class="hljs-keyword">AND </span>project_id = <span class="hljs-number">1000386</span> <span class="hljs-keyword">AND </span>game_id = <span class="hljs-number">1002521</span> <span class="hljs-keyword">AND </span>version_id = <span class="hljs-number">1003615</span> <span class="hljs-keyword">AND </span>state = <span class="hljs-string">&#x27;activity&#x27;</span>)<br><br>UPDATE deployment  SET state=<span class="hljs-string">&#x27;install&#x27;</span>  <br> <br> WHERE (tenant_id = <span class="hljs-number">229135120355456</span> <span class="hljs-keyword">AND </span>project_id = <span class="hljs-number">1000386</span> <span class="hljs-keyword">AND </span>game_id = <span class="hljs-number">1002521</span> <span class="hljs-keyword">AND </span>version_id &lt;&gt; <span class="hljs-number">1003615</span> <span class="hljs-keyword">AND </span>state = <span class="hljs-string">&#x27;activity&#x27;</span>)<br><br>*** (<span class="hljs-number">2</span>) HOLDS THE LOCK(S):<br>RECORD LOCKS space id <span class="hljs-number">7</span> page no <span class="hljs-number">400</span> n <span class="hljs-keyword">bits </span><span class="hljs-number">440</span> index idx_projectid of table `<span class="hljs-keyword">cloudgaming_deploy_prod`.`deployment` </span>trx id <span class="hljs-number">795133944</span> lock_mode X locks rec <span class="hljs-keyword">but </span>not gap<br>Record lock, heap no <span class="hljs-number">150</span> PHYSICAL RECORD: n_fields <span class="hljs-number">2</span><span class="hljs-comment">; compact format; info bits 0</span><br><span class="hljs-symbol"> 0:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 00000000000f43c2; asc       C ;; 【1000386】</span><br><span class="hljs-symbol"> 1:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 0000000000001dea; asc         ;; 【7658】</span><br><br>Record lock, heap no <span class="hljs-number">162</span> PHYSICAL RECORD: n_fields <span class="hljs-number">2</span><span class="hljs-comment">; compact format; info bits 0</span><br><span class="hljs-symbol"> 0:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 00000000000f43c2; asc       C ;; 【1000386】</span><br><span class="hljs-symbol"> 1:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 0000000000001df6; asc         ;; 【7670】</span><br><br><br>*** (<span class="hljs-number">2</span>) <span class="hljs-keyword">WAITING </span>FOR THIS LOCK TO <span class="hljs-keyword">BE </span>GRANTED:<br>RECORD LOCKS space id <span class="hljs-number">7</span> page no <span class="hljs-number">303</span> n <span class="hljs-keyword">bits </span><span class="hljs-number">200</span> index PRIMARY of table `<span class="hljs-keyword">cloudgaming_deploy_prod`.`deployment` </span>trx id <span class="hljs-number">795133944</span> lock_mode X locks rec <span class="hljs-keyword">but </span>not gap <span class="hljs-keyword">waiting</span><br><span class="hljs-keyword"></span>Record lock, heap no <span class="hljs-number">68</span> PHYSICAL RECORD: n_fields <span class="hljs-number">12</span><span class="hljs-comment">; compact format; info bits 128</span><br><span class="hljs-symbol"> 0:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 0000000000001df6; asc         ;; 【7670】</span><br><span class="hljs-symbol"> 1:</span> len <span class="hljs-number">6</span><span class="hljs-comment">; hex 00002f0367d9; asc   / g ;;</span><br><span class="hljs-symbol"> 2:</span> len <span class="hljs-number">7</span><span class="hljs-comment">; hex 020000027f3795; asc      7 ;;</span><br><span class="hljs-symbol"> 3:</span> len <span class="hljs-number">7</span><span class="hljs-comment">; hex 99af6d39cb099c; asc   m9   ;;</span><br><span class="hljs-symbol"> 4:</span> len <span class="hljs-number">7</span><span class="hljs-comment">; hex 99b00ae0811a68; asc       h;;</span><br><span class="hljs-symbol"> 5:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 0000d065ad745080; asc    e tP ;;</span><br><span class="hljs-symbol"> 6:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 00000000000f43c2; asc       C ;;</span><br><span class="hljs-symbol"> 7:</span> len <span class="hljs-number">26</span><span class="hljs-comment">; hex 63672d333935393538363835323730323737313230497046356d; asc cg-395958685270277120IpF5m;;</span><br><span class="hljs-symbol"> 8:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 00000000000f4c1d; asc       L ;;</span><br><span class="hljs-symbol"> 9:</span> len <span class="hljs-number">8</span><span class="hljs-comment">; hex 00000000000f5062; asc       Pb;;</span><br><span class="hljs-symbol"> 10:</span> len <span class="hljs-number">7</span><span class="hljs-comment">; hex 696e76616c6964; asc invalid;;</span><br><span class="hljs-symbol"> 11:</span> len <span class="hljs-number">4</span><span class="hljs-comment">; hex 80000001; asc     ;;</span><br><br>*** WE ROLL <span class="hljs-keyword">BACK </span>TRANSACTION (<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>上面的日志可以看到冲突的两个事务，里面两个事务包含的sql信息不全，去代码里查了一些两个事务完整的sql。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;!-- 这条在代码里 --&gt;</span><br>UPDATE deployment  SET <span class="hljs-keyword">state</span>=&#x27;activity&#x27;  <br> WHERE (tenant_id = <span class="hljs-number">229135120355456</span> AND project_id = <span class="hljs-number">1000386</span> AND game_id = <span class="hljs-number">1002525</span> AND version_id = <span class="hljs-number">1003618</span> AND <span class="hljs-keyword">state</span> = &#x27;install&#x27;)<br><span class="hljs-variable">&lt;!-- 这条是冲突的部分 --&gt;</span><br>UPDATE deployment  SET <span class="hljs-keyword">state</span>=&#x27;activity&#x27;  <br> WHERE (tenant_id = <span class="hljs-number">229135120355456</span> AND project_id = <span class="hljs-number">1000386</span> AND game_id = <span class="hljs-number">1002525</span> AND version_id <span class="hljs-variable">&lt;&gt;</span> <span class="hljs-number">1003618</span> AND <span class="hljs-keyword">state</span> = &#x27;install&#x27;)<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;!-- 这条在代码里 --&gt;</span><br>UPDATE deployment  SET <span class="hljs-keyword">state</span>=&#x27;install&#x27;  <br> WHERE (tenant_id = <span class="hljs-number">229135120355456</span> AND project_id = <span class="hljs-number">1000386</span> AND game_id = <span class="hljs-number">1002521</span> AND version_id = <span class="hljs-number">1003615</span> AND <span class="hljs-keyword">state</span> = &#x27;activity&#x27;)<br><span class="hljs-variable">&lt;!-- 这条是冲突的部分 --&gt;</span><br>UPDATE deployment  SET <span class="hljs-keyword">state</span>=&#x27;install&#x27;  <br> WHERE (tenant_id = <span class="hljs-number">229135120355456</span> AND project_id = <span class="hljs-number">1000386</span> AND game_id = <span class="hljs-number">1002521</span> AND version_id <span class="hljs-variable">&lt;&gt;</span> <span class="hljs-number">1003615</span> AND <span class="hljs-keyword">state</span> = &#x27;activity&#x27;)<br></code></pre></td></tr></table></figure><p>结合日志信息，就可以知道死锁是怎么造成的了。</p><p>首先对于第一个事务，第一条sql取到了主键为7670的记录的锁。这个时候，这个时候想去获取idx_projectid的锁。<br>对于第二个事务，第一条sql取到了主键为xxx的锁（这个没有体现在日志里，因为这个锁不是造成这个死锁的原因），第二天sql取到了idx_projectid的锁，这时候想去锁住idx_projectid索引下的记录的锁。<br>最终两个事务造成了死锁</p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>实际上可以看到造成死锁的原因在于两个事务都请求或者获取了idx_projectid的这个索引的锁。而两个sql都有着相同的projectId，所以必然会造成冲突。<br>实际上，通过<code>explain</code>的方式查看sql的执行，会发现这sql用到了<code>idx_projectid, idx_gameid</code>的merge index，这说明索引的设计有问题。<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `deployment` (<br>  `id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `gmt_create` datetime(<span class="hljs-number">3</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>(<span class="hljs-number">3</span>) COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime(<span class="hljs-number">3</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>(<span class="hljs-number">3</span>) COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;租户id&#x27;</span>,<br>  `project_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;项目id&#x27;</span>,<br>  `instance_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;实例id&#x27;</span>,<br>  `game_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;游戏id&#x27;</span>,<br>  `version_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;游戏版本id&#x27;</span>,<br>  `state` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;init&#x27;</span> COMMENT <span class="hljs-string">&#x27;状态(等待部署/部署中/已部署/已卸载/已激活)&#x27;</span>,<br>  `send` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;是否发送给下游 0-未 1-已&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_deploykey` (`project_id`,`instance_id`,`game_id`,`version_id`),<br>  KEY `idx_tenantid` (`tenant_id`),<br>  KEY `idx_projectid` (`project_id`),<br>  KEY `idx_instanceid` (`instance_id`(<span class="hljs-number">32</span>)),<br>  KEY `idx_gameid` (`game_id`),<br>  KEY `idx_versionid` (`version_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">21629</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb3 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;游戏版本部署&#x27;</span>;<br></code></pre></td></tr></table></figure></p><h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><h2 id="代码层面上–推荐"><a href="#代码层面上–推荐" class="headerlink" title="代码层面上–推荐"></a>代码层面上–推荐</h2><p>业务层面上对于这种场景，通常<code>ne</code>可以用来查，但是最好不要用来修改。<br>所以这种情形应当先把需要修改的行查出来，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;DeploymentDO&gt; <span class="hljs-title function_">listDeactivateDeployment</span><span class="hljs-params">(Long tenantId, Long projectId, Long gameId, Long versionId)</span> &#123;<br>        QueryWrapper&lt;DeploymentDO&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(<span class="hljs-string">&quot;tenant_id&quot;</span>, tenantId);<br>        queryWrapper.eq(<span class="hljs-string">&quot;project_id&quot;</span>, projectId);<br>        queryWrapper.eq(<span class="hljs-string">&quot;game_id&quot;</span>, gameId);<br>        queryWrapper.ne(<span class="hljs-string">&quot;version_id&quot;</span>, versionId);<br>        queryWrapper.eq(<span class="hljs-string">&quot;state&quot;</span>, DeploymentEnum.ACTIVITY.getState());<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.baseMapper.selectList(queryWrapper);<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后针对id去修改，就不会出现冲突的问题了。</p><h2 id="索引层面上"><a href="#索引层面上" class="headerlink" title="索引层面上"></a>索引层面上</h2><p>应当适当地去掉一些索引，对于出现了<code>idx_projectid, idx_gameid</code>这种类似的merge index的时候，应该考虑创建一个复合索引来替代<code>idx_projectid_gameid</code>，这样也可以避免冲突。</p>]]></content>
    
    
    <categories>
      
      <category>bug记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust学习记录</title>
    <link href="/2023/05/05/rust%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/05/05/rust%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h1><ul><li><p>闭包<br>希望能够在程序的一个位置指定某些代码，并只在程序的某处实际需要结果的时候 执行 这些代码</p></li><li><p>Self表示实现了该方法的类型，&amp;Self表示该类型的引用；<br>self表示传入实例方法的参数名，&amp;self是self: &amp;Self的缩写语法糖；<br>（self单独作参数时，是self: Self的缩写语法糖）<br>&amp;*self在例子中是对参数self: &amp;mut Self的不可变再借用。&amp;*self表示再借用,其实底层就是复制了一个指针</p></li><li><p>对于类型T的约束T:’static意味着T不包含任何非’static引用；对于接收方来说可以安全地持有T直到自己将其drop。</p></li><li><p>手动drop调用的是std::mem::drop()，自动drop调用的是std::ops::Drop::drop()。std::ops::Drop::drop()是不能手动调用的。<br>手动std::mem::drop()是假的，不释放内存，只是把所有权转移到一个临时位置不能访问了。实际释放资源依然是在离开作用域时，调用std::ops::Drop::drop()来实现。<br>手动调用时，所有权通过参数传入drop()，然后在drop()方法结束时(离开作用域)，调用Drop()::drop()释放掉形参。<br>也就是说，并不是mem::drop()导致的释放，而是在mem::drop()结束时自动释放。</p></li><li><p>当子线程运行完成时，发送者tx会随之被drop，此时for循环将被终止，最终main线程成功结束</p></li><li><p>Rc<T>&#x2F;RefCell<T>用于单线程内部可变性， Arc<T>&#x2F;Mutex<T>用于多线程内部可变性</p></li><li><p>实现Send的类型可以在线程间安全的传递其所有权<br>实现Sync的类型可以在线程间安全的共享(通过引用)<br>这里还有一个潜在的依赖：一个类型要在线程间安全的共享的前提是，指向它的引用必须能在线程间传递。因为如果引用都不能被传递，我们就无法在多个线程间使用引用去访问同一个数据了。<br>由上可知，若类型 T 的引用&amp;T是Send，则T是Sync</p></li></ul><h1 id="一些手段"><a href="#一些手段" class="headerlink" title="一些手段"></a>一些手段</h1><ul><li><code>cargo run</code>之后遇到了<br><code>Blocking waiting for file lock on package cache</code><br>问题怎么办？<br>如果确定没有多个程序占用，可以删除<code>rm -rf ~/.cargo/.package-cache</code>，然后再执行</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
